<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Crafthm Site</title>
  <subtitle>要把时间浪费在美好的事物上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ieatapple.com/"/>
  <updated>2016-05-20T08:37:45.000Z</updated>
  <id>http://ieatapple.com/</id>
  
  <author>
    <name>坦夫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SyntaxKit的几个问题</title>
    <link href="http://ieatapple.com/2016/05/20/the-bugs-of-syntaxkit/"/>
    <id>http://ieatapple.com/2016/05/20/the-bugs-of-syntaxkit/</id>
    <published>2016-05-20T08:33:00.000Z</published>
    <updated>2016-05-20T08:37:45.000Z</updated>
    
    <content type="html">&lt;p&gt;在写一个xcBuddy App的过程中，需要一个给代码着色的ios库，试用了Github 里若干款，目前能找到的最好的是&lt;a href=&quot;https://github.com/soffes/SyntaxKit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SyntaxKit&lt;/a&gt;，用Swift语言编写，通过解析tmLanguage和tmTheme这两个标准的xml文件，将解析结果应用到代码着色上，TextMate和sublime均可以加载这两种文件，灵活度很高。&lt;/p&gt;
&lt;p&gt;tmLanguage文件定义了该语言需着色的关键字及正则表达式，tmTheme文件则是定义了代码着色方案，大体思路是通过到tmLanguage去匹配需要着色的文字，然后到tmTheme文件去找着色方案，输出NSAttributedString。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;具体来说是，tmLanguage文件内容结构，分patterns和respository两大部分，pattern定义了一个解析序列，具体解析方案定义在respository里面，包含了大量的正则表达式、结构，甚至会再嵌套子patterns和子respository,先将代码字符串读进来，遍历tmLanguage文件的patterns部分，遍历过程中会到respository去做文字匹配，如果匹配成功，就会到tmTheme中去找相应的代码着色方案，将之转换为attributedText插入到代码字符串，然后结束本次遍历，解析接下来的字符串，直到最后。&lt;/p&gt;
&lt;p&gt;该库设计理念基本适用于解析这两个文件需求，问题是太不成熟，缺乏大量的调试和测试，Github上的若干tmLanguage库解析结果着色不全，较为复杂的tmLanguage文件结构解析在代码中也没有体现，尤其对于respository里面又包含patterns和respository的情况没有考虑。&lt;/p&gt;
&lt;p&gt;现主要做了三点更改：&lt;br&gt;language类和pattern类结构引入了respository字典，基于两点考虑，一是代码简洁便于查找respository，二是如果文件有更为复杂的pattern包含关系，也可应付，；&lt;br&gt;parser类解析过程问题主要有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整行解析例如：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;functionname&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;override 为keyword正则表达式所匹配，func是declaration正则所匹配，库顺序匹配，如果tmLanguage文件中的declaration正则在前，ovveride就得不到匹配被忽略；&lt;/p&gt;
&lt;p&gt;2、对于基本的跨行注释符也没有处理：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt; long comment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类似跨多行的匹配均没有处理过程；&lt;/p&gt;
&lt;p&gt;3、对tmLanguage文件中pattern里又嵌套pattern的模型没有处理，导致一些在第一层pattern可以部分匹配，需要到嵌套的pattern里完全匹配的情况，无法正常解析。&lt;/p&gt;
&lt;p&gt;以上问题，更改后，仅针对swift代码文件做的测试，代码着色基本差不多，解析效率也比较低，解析过程上做了些优化，还是不理想，虽可以通过异步的方式，和将着色完成的NSAttrbutedString存文件，再打开时载入它，提高体验，但是在之后做实时输入着色的时候，效率也是堪忧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在写一个xcBuddy App的过程中，需要一个给代码着色的ios库，试用了Github 里若干款，目前能找到的最好的是&lt;a href=&quot;https://github.com/soffes/SyntaxKit&quot;&gt;SyntaxKit&lt;/a&gt;，用Swift语言编写，通过解析tmLanguage和tmTheme这两个标准的xml文件，将解析结果应用到代码着色上，TextMate和sublime均可以加载这两种文件，灵活度很高。&lt;/p&gt;
&lt;p&gt;tmLanguage文件定义了该语言需着色的关键字及正则表达式，tmTheme文件则是定义了代码着色方案，大体思路是通过到tmLanguage去匹配需要着色的文字，然后到tmTheme文件去找着色方案，输出NSAttributedString。&lt;/p&gt;
    
    </summary>
    
      <category term="软件探索录" scheme="http://ieatapple.com/categories/%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2%E5%BD%95/"/>
    
    
      <category term="SyntaxKit" scheme="http://ieatapple.com/tags/SyntaxKit/"/>
    
      <category term="ios" scheme="http://ieatapple.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>“铁肩担道义，辣手著文章”——小说《人皮论语》推荐</title>
    <link href="http://ieatapple.com/2016/05/20/the-human-skin-analects/"/>
    <id>http://ieatapple.com/2016/05/20/the-human-skin-analects/</id>
    <published>2016-05-20T08:33:00.000Z</published>
    <updated>2016-06-12T02:51:55.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;“铁肩担道义，辣手著文章”——小说《人皮论语》推荐&quot;&gt;“铁肩担道义，辣手著文章”——小说《人皮论语》推荐&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/2016-06-08-59668837_2.jpg&quot; alt=&quot;论语&quot;&gt;&lt;/p&gt;
&lt;p&gt;明明知道这只是一本小说，看完之后仍久久不能从惨烈的结局中自拔，讲的是两大男主：史官司马迁和游侠朱安世，为了自己心里的道，面对朝廷的阴谋陷害，面对酷吏和皇家刺客的联合绞杀，不畏皇权拯救唯一一份孔壁《论语》的故事，通篇史料考证准确、情节荡气回肠、人物刻画入微、悬疑性很强，即使你认为你能猜得中结尾，结尾却更甚之，同时留有巨大的反思空间，好看。&lt;/p&gt;
&lt;p&gt;其中的人物&lt;br&gt;文有：司马迁、柳夫人、卫真、&lt;br&gt;侠有：朱安世、孔驩、韩嬉、郦袖、樊仲子、赵王孙、郭公仲、阿绣&lt;br&gt;反派：杜周、咸宣、吕步舒、汉武帝&lt;/p&gt;
&lt;p&gt;这些人千年之后，均烟消云散，唯《论语》留存下来，它是把钥匙，还是把绳索，能否让这个世界深处于无穷黑夜之中，黑穹之下只有点点星火，然而这固然可怕，更可怕的是并非身处黑夜，而是在青天白日、朗朗乾坤之下，有无数无形的线牵制着无数受人操纵的傀儡，他们遵守的受人摆布的道德，行走在别人划定的圈圈里。&lt;/p&gt;
&lt;p&gt;《论语》对统治国家有那么大的影响吗？&lt;/p&gt;
&lt;p&gt;有，《论语》是儒家经典，有不少涉及到皇权思想，首先，帝王绝对不想弱于孔子思想对儒生的影响力，其次说到底，是君轻民重，还是反之的问题。想想还是唐朝魏征聪明，他跟唐太宗理论这件事时，不说孰轻孰重，说的是“水能载舟亦能覆舟”的道理，不过话说十分，做之七八分，如果话说七八分，则做起来就更少了。&lt;/p&gt;
&lt;p&gt;至今，《论语》对中国人的影响已经深入骨髓，有尊师重道这种从小就有的习惯性教育，也有三纲五常，听起来头大，很过时的理论，但是，它是我们很多的价值观和道德观的源头，是我们现在对人对事的准则，而我们古时的很多朝代笃信儒教，就是从汉武帝统治时期开始的。&lt;/p&gt;
&lt;p&gt;宗教在国外自古以来都是统治者巩固帝国管理的一把很顺手的工具，小说家丹.布朗的《达芬奇密码》里面提到天主教教义、甚至神性都是统治者的走卒投票决定，虽是天马行空的小说家想象，但是我们可以借此试着反推我们现在所看到的儒学，有没有被统治者做过手脚，而历史上的汉武帝推行“罢黜百家，独尊儒术”究竟是为了什么？你们都别百家争鸣了，我们只尊崇儒学，但是，这个“儒”，是真“儒”还是假“儒”？是孔子的“儒”，还是愚民的“儒”？&lt;/p&gt;
&lt;p&gt;中国古代皇帝这份职业，管理工作总得考虑到两种人：文臣、武将，在民间多是韩非子所说的“儒以文乱法，侠以武犯禁”，从事类似于儒生和侠客职业的人。秦朝作为汉朝的前车之鉴，“秦皇汉武”嘛，干过哪些事儿：焚书坑儒和禁刀令，结果怎么样。&lt;/p&gt;
&lt;p&gt;所以，小时候看的那些神话故事，不是白看的，“大禹治水”最终成功治水的方法是宜疏不宜堵，洪水汹涌，堵是堵不住的，你得挖沟引流。汉朝刘家的天下也是打来的，稳固统治当然是历代皇帝的第一要务，群潮汹涌，民怨沸腾，犹如洪水，秦朝“堵”没堵住把自己淹死了，那么如何“疏”呢？&lt;/p&gt;
&lt;p&gt;汉武帝上位后，“推恩令”削弱了诸侯力量，推行“独尊儒术”限制了文人的思想自由，而且他在位期间的酷吏特别多，压制地方豪强，刑法很严酷，一手对文人设立精神偶像和思想牢笼，一手对侠客强烈镇压，小说末尾司马迁与汉武帝的一段对话是这么说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;刘彻忽然得意道：“你拿他们来和我比？哼哼！他们哪里懂御人之道？我威之以刑、诱之以利、劝之以学、导之以忠孝。从里到外、从情到理、从爱到怕、从生到死，尽都被我掌控驯服，谁逃得出？”&lt;/p&gt;
&lt;p&gt;司马迁又笑道：“你为钳制人心，独尊儒术、忘了这世间还有其他学问，你难道没听过庄子之言：‘盗其国，所盗者岂独其国邪？并与其圣知法而盗之’。你能创制这御人之术，别人难道不能借你之道，夺你天下？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，《论语》是否被掉包？作者冶文彪从史书中发现最大的疑点是：孔壁《论语》。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;秦始皇焚书禁书，再加上战火连年，到汉代，先秦古籍已经残灭殆尽，很难凑齐一本完整的经典。这是中国文化史上的一次严重断裂。不过，汉景帝末年，孔子旧宅发掘出一批古简，有古文《论语》、《尚书》等，被称为孔壁古文。孔子十一世孙孔安国把它们上献给宫中，这是中国文化考古史上的一次极重要的发现。 然而孔壁古文（包括《论语》）并没有得到流传！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而由这个疑点又牵扯出一系列疑点，司马迁因何被施以宫刑甚至他的死是个谜，正本《史记》最终藏于何处是个谜，在皇宫大内宫墙之上逼近汉武帝的黑衣刺客是个谜，天汉元年三任御史接连死亡是个谜，巫蛊之祸真正起因是个谜，朱安世逃亡多年为什么轻易被捉是个谜，《史记》里关于朱安世这个巫蛊之祸的关键人物描写却寥寥数语是个谜等，作者将这些谜逐一通过故事架构，巧手链接，主角一路走来，疑云重重，最终一切真相大白之际，决然卫道赴死。&lt;/p&gt;
&lt;p&gt;由此能够看出作者“活”读书的本事很厉害，而这种以史实为依据，以构建小说为目的的阅读，想来也非常有意思吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;司马迁：道者，既指言，又指路，人心通路也。世间有不公，人人若能直言其事，公义自然通达，邪恶自然祛除，天下自然归于正道；反之，眼见不公，人却不敢言，不能言，则邪恶日升、公义日丧，天下势必趋于邪途。故而，有道无道，只看言路是否畅通、世人能否说真话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是王者应有的道，也是世界该有的世道。&lt;/p&gt;
&lt;p&gt;故事里每个人的心里也都有自己的道，司马迁的道是求实，不管是对学问，还是对自己的著作（很惭愧，读这本书时才知道《史记》不是官修史书）；柳夫人的道是对爱人无保留的支持（从她身上的一些品质想到一位刚过世的大师杨绛先生）；卫真的道是对主人的忠诚；朱安世的道是言必信、行必果，保护弱小、不畏强权；韩嬉的道是为爱毫无保留；樊仲子、赵王孙、郭公仲的道是舍生取义；阿绣的道是知恩图报。&lt;/p&gt;
&lt;p&gt;另外，司马迁的这段话是不是也很有现世的讽刺意义？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;“铁肩担道义，辣手著文章”——小说《人皮论语》推荐&quot;&gt;“铁肩担道义，辣手著文章”——小说《人皮论语》推荐&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/2016-06-08-59668837_2.jp
    
    </summary>
    
      <category term="无责任书评" scheme="http://ieatapple.com/categories/%E6%97%A0%E8%B4%A3%E4%BB%BB%E4%B9%A6%E8%AF%84/"/>
    
    
      <category term="人皮论语" scheme="http://ieatapple.com/tags/%E4%BA%BA%E7%9A%AE%E8%AE%BA%E8%AF%AD/"/>
    
      <category term="冶文彪" scheme="http://ieatapple.com/tags/%E5%86%B6%E6%96%87%E5%BD%AA/"/>
    
      <category term="历史小说" scheme="http://ieatapple.com/tags/%E5%8E%86%E5%8F%B2%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>《火锅英雄》的“自来水”需知的重庆防空洞黑色历史</title>
    <link href="http://ieatapple.com/2016/05/18/chaffy-dish-hero/"/>
    <id>http://ieatapple.com/2016/05/18/chaffy-dish-hero/</id>
    <published>2016-05-18T07:33:13.000Z</published>
    <updated>2016-05-18T12:18:02.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E7%81%AB%E9%94%85%E8%8B%B1%E9%9B%84.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“重庆，大家都晓得，是一座火锅的城市，到处都是火锅店，但是，很多人不晓得，重庆也是一座布满防空洞的城市，因为地下有数都数不清的防空洞，上上下下，密密麻麻，到处都是，所以，当防空洞和火锅结合的时候，就产生了重庆最具特色的火锅店——洞子火锅，火锅店开在防空洞里头，又好吃有好玩，这个在全世界都是独一无二的”。&lt;/p&gt;
&lt;p&gt;——电影《火锅英雄》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;重庆，因其特殊的地理位置，四周环山，长江和嘉陵江环绕，易守难攻，在抗日战争期间，中华民国政府与其双都身份，即“战时首都”和“永久陪都”，1937年11月，国军淞沪抗战失利，南京告急，当月20日起，迁址重庆作为战时首都。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;重庆大轰炸，是抗战时期日军发起的战略轰炸，发生于1938年2月18日到1944年12月19日，历时长达近六年十个月中，据不完全统计，共进行了218次轰炸，出动9513架次飞机，投弹21593枚，并大量使用燃烧弹，死者达11889人，炸伤14100人，有17600幢房屋被毁，30余座大小中学曾被轰炸。在此期间发生的大惨剧有“五三五四大轰炸”、“八一九大轰炸”和“六五大隧道惨案”，重庆遭受了前所未有的浩劫，日本飞机也创造了世界有史以来的空军屠杀的黑暗记录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E4%B9%9D%E4%B8%83%E5%BC%8F%E9%87%8D%E7%88%86%E8%BD%B0%E7%82%B8%E6%9C%BA.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;重庆上空的“九七重爆轰炸机”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E4%BA%94%E4%B8%89%E4%BA%94%E5%9B%9B%E5%A4%A7%E8%BD%B0%E7%82%B8.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;重庆五三五四大轰炸&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E8%BD%B0%E7%82%B8%E8%BF%87%E5%90%8E.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;轰炸过后的重庆&lt;/p&gt;
&lt;p&gt;当时，重庆人民利用“山城”的地势，挖掘了大量横七竖八的防空洞，共计110万平方米，构建了重庆的地下世界，所以，重庆防空洞庇佑了战时的百万生灵，但是如果利用不当，就有可能成为阿鼻地狱，最大的事件就是于1938年6月9日的“黄河花园口决堤”、1938年11月13日的“长沙文夕大火”，并称为抗战时期的中国三大惨案的“大隧道惨案”。&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E9%98%B2%E7%A9%BA%E6%B4%9E.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;战时重庆防空洞外部&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E9%98%B2%E7%A9%BA%E6%B4%9E2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;战时重庆防空洞内部&lt;/p&gt;
&lt;p&gt;重庆大隧道惨案，发生在1941年6月5日晚9时，在日军长达5个小时的空袭中，由于管理隧道口的宪兵紧锁大门，不准隧道内的市民在空袭期间出入隧道，在长达10小时的高温和严重缺氧的情况下，避难民众因窒息、踩踏致死者不计其数。&lt;/p&gt;
&lt;p&gt;拥挤、潮湿、呼吸不畅、婴孩啼哭、外面轰隆隆的爆炸声、脚下温度奇高、左右的人不由自主的撕破身上衣裤、失去理智者大哭大叫，甚至以头碰墙，氧气越来越少，油灯逐渐熄灭、洞内人群骚动起来、开始往外挤，洞门锁死、情绪急躁、互相践踏长达5个小时，惨状如当时的重庆市市长吴国桢所说，洞内的难民团挤一堆，前排人脚下的人大都死去，躺在地下的人牢牢的抓住站着的人，解不开也拖不动，后面层层堆叠的人，有昏过去的，有已死的，有呻吟哀嚎的，惨不忍睹。&lt;/p&gt;
&lt;p&gt;事件外因固然是主因，然而，更值得我们国人至今反思的是内因，就是危机时刻自己的同胞也是刽子手。&lt;/p&gt;
&lt;p&gt;技术上的失误（援引自重庆市博物馆杨筱的《关于重庆“大隧道窒息惨案”的两个问题的补充讨论》）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;事发前城内警报失误，给予了民众错误的引导，疏导指挥混乱；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人数超量，事发地点全洞经计算可容纳6555人，当天入洞人数不可查证（后经论证，入洞者超过万人）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工程的设计缺陷，隧道两端出口必须一头高一头低，可使空气对流、自然通风；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隧道较长，中间为设计通风井工程，无排水沟设施，人多潮湿蒸发上来，气闷难当；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人祸：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通风机需30具，因经费不足和挪用，只买了20具，于1940年12月安装完成，而且直到半年后事发时也未投入使用，只因防空部没给军政部贿赂，拒绝验收；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事发当天，参加抢救的士兵和队员，视生命如儿戏，强拖尸体，有未死者被拖断手脚、甚至被拖死；也有趁火打劫，偷取尸体随身财物的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事发后，蒋介石组建委员会，对惨案进行调查，最终公布的遇难数字是992，明显有人为操纵死亡数字，以减轻民怨和舆论压力的目的，最后撤职数人，草草了事。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话：&lt;br&gt;上述的三大惨案另外两件都与蒋介石有直接关系，“长沙大火惨案”是奉命蒋介石的“焦土抗战”密令，该方案最早提出来的是李宗仁；而“花园口惨案”，是为了阻止日军西进，蒋介石采取“以水代兵”的战术，下令人为扒开黄河南岸渡口花园口，造成决堤改道，形成黄泛区，一片汪洋之下，安徽、江苏、河南成为灾区，直接导致了89万人的死亡，和1941年到1943年的“河南大饥荒”，冯小刚的《1942》讲的就是那时的事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/dasuidao2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;大隧道惨案浮雕&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/dasuidao.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;大隧道惨案尸体&lt;/p&gt;
&lt;p&gt;1942年，日军对重庆的空袭基本停止，防空工事的构筑逐渐停止；&lt;/p&gt;
&lt;p&gt;解放后，上世纪50年代中期正式设立人民防空机构；&lt;/p&gt;
&lt;p&gt;到上世纪60年代中期以前，人防工程建设局限于少数大型厂矿，这也是为什么目前重庆许多防空洞分布在曾经的老厂区的原因；&lt;/p&gt;
&lt;p&gt;上世纪60年代中期至70年代初，因国际关系持续紧张，重庆构筑防空洞出现了空前热潮，钻”毛洞“探险也成为一代人的儿时娱乐经历；&lt;/p&gt;
&lt;p&gt;直到80年代，这种建设热潮在逐渐冷下来，转入了对防空洞的利用。&lt;/p&gt;
&lt;p&gt;防空洞，阴暗潮湿，温度稳定，凉爽宜人，因为这些特点，如今逐渐被开发出来作纳凉之用，位于三峡博物馆下面的防空洞是重庆主城区人气最旺的人防工程，位于大溪沟站内，这里座椅、电视、饮水机报刊栏一应俱全；或用于酒窖，合理利用洞内恒温20度的条件，能够更好的保存酒的品质；或用于餐饮，如吃新鲜水货的鱼庄，更多的是像电影《火锅英雄》里地道的“洞子火锅”，它的拍摄地已经被万能的网友挖掘出来了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E6%B4%9E%E5%AD%90%E7%81%AB%E9%94%85.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E6%B4%9E%E5%AD%90%E7%81%AB%E9%94%852.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;老同学洞子火锅&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E7%BA%B3%E5%87%891.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;防空洞纳凉处&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E7%89%B9%E8%89%B2%E5%B0%8F%E5%90%83%E5%BA%97.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;防空洞小吃店&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/jiujiao1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;防空洞酒窖外部&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/jiujiao2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;防空洞酒窖内部&lt;/p&gt;
&lt;p&gt;那么，重庆的防空洞到底有多复杂？有没有可能从火锅店挖到钱库？各位看官自己判断，但是请记住重庆的地质结构大都是岩石层，建地铁难度比北京要高很多，因为北京是沙土层。有位地道的重庆妹子——张武益，经过实地考察，在她的微博（“冻疮长在膝盖上”）上用简笔画画的重庆防空洞的大体结构，微博原图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E5%86%BB%E7%96%AE%E9%95%BF%E5%9C%A8%E8%86%9D%E7%9B%96%E4%B8%8A1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E5%86%BB%E7%96%AE%E9%95%BF%E5%9C%A8%E8%86%9D%E7%9B%96%E4%B8%8A2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E5%86%BB%E7%96%AE%E9%95%BF%E5%9C%A8%E8%86%9D%E7%9B%96%E4%B8%8A3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而当年战时大轰炸遗址，位于解放碑商圈内较场口磁器街。1941年6月5日，在日军地毯式无差别轰炸下，发生了震惊世人的重庆“六五隧道大轰炸惨案“,重庆解放后，这里成为大轰炸惨案遗址，无时无刻警醒世人，珍惜和平，勿忘历史。&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E9%87%8D%E5%BA%86%E5%A4%A7%E8%BD%B0%E7%82%B8%E6%83%A8%E6%A1%88%E9%81%97%E5%9D%80.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;﻿俗话说，光说不做嘴把式,光想不做脑把式：&lt;/p&gt;
&lt;p&gt;【真·脑把式】边想边写，为真脑把式；&lt;br&gt;【真·嘴把式】又说又做，乃真嘴把式；&lt;/p&gt;
&lt;p&gt;左手纸笔键盘，右手刀叉油面，有有趣的文字，也有不可辜负的美食。&lt;br&gt;感兴趣，请关注微信公众号【西点菌酵】，【长按】或【扫描】下面的二维码：&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/weidian%2Fqrcode_for_gh_5b9ee48e96de_258%20_8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;笔者家里的小店”为你在新西兰逛超市“，有需要新西兰和澳洲产品的，可进来逛逛：&lt;br&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/weidian%2Fweidian.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;请【长按】或【扫描】上面的”条码君“。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xqvso.com1.z0.glb.clouddn.com/%E7%81%AB%E9%94%85%E8%8B%B1%E9%9B%84.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“重庆，大家都晓得，是一座火锅的城市，到处都是火锅店，但是，很多人不晓得，重庆也是一座布满防空洞的城市，因为地下有数都数不清的防空洞，上上下下，密密麻麻，到处都是，所以，当防空洞和火锅结合的时候，就产生了重庆最具特色的火锅店——洞子火锅，火锅店开在防空洞里头，又好吃有好玩，这个在全世界都是独一无二的”。&lt;/p&gt;
&lt;p&gt;——电影《火锅英雄》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;重庆，因其特殊的地理位置，四周环山，长江和嘉陵江环绕，易守难攻，在抗日战争期间，中华民国政府与其双都身份，即“战时首都”和“永久陪都”，1937年11月，国军淞沪抗战失利，南京告急，当月20日起，迁址重庆作为战时首都。&lt;/p&gt;
    
    </summary>
    
      <category term="透过电影看世界" scheme="http://ieatapple.com/categories/%E9%80%8F%E8%BF%87%E7%94%B5%E5%BD%B1%E7%9C%8B%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="电影" scheme="http://ieatapple.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>如何制作Xcode插件：1/3</title>
    <link href="http://ieatapple.com/2016/02/13/creating-an-xcode-plugin-part-1/"/>
    <id>http://ieatapple.com/2016/02/13/creating-an-xcode-plugin-part-1/</id>
    <published>2016-02-13T06:38:00.000Z</published>
    <updated>2016-05-18T12:18:40.000Z</updated>
    
    <content type="html">&lt;p&gt;译者注：在学习写xcode插件的过程中，找了一些资料，其中&lt;a href=&quot;http://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;www.raywenderlich.com&lt;/a&gt;中的三篇文章写得很好，这是其中的第一篇《&lt;a href=&quot;http://http://www.raywenderlich.com/94020/creating-an-xcode-plugin-part-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How To Create an Xcode Plugin:Part1/3 &lt;/a&gt;》。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;更新备注：&lt;/strong&gt;这篇教程只用Xcode6.3.2测试过——如果你使用的其他版本的Xcode，那么你的经历可能会与这篇教程中的有一定出入。&lt;/p&gt;
&lt;p&gt;苹果公司针对扩展其产品的“一刀切”的规则就像让人强吞下一颗难以忍受的药丸。尽管目前苹果公司强制iOS或者OS X平台的开发者使用它的工作流程，但是仍然可以通过制作插件的方式使Xcode更为适用。&lt;/p&gt;
&lt;p&gt;这不是关于如何制作Xcode插件的苹果公司官方文档，但是开发社区已经做了数量惊人的工作致力于帮助让开发者拥有更为有效的工具。&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;https://github.com/ksuther/KSImageNamed-Xcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autocompletion for images&lt;/a&gt;，到nuking你的&lt;a href=&quot;https://github.com/kattrali/deriveddata-exterminator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Derived Data&lt;/a&gt;，再到&lt;a href=&quot;https://github.com/XVimProject/XVim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vim editor&lt;/a&gt;，Xcode插件社区已经推动了原本被认为可以推动的边界。&lt;/p&gt;
&lt;p&gt;在这史诗般的三篇教程中，你将制作一款Xcode插件来恶搞你的搭档，而主演恶搞者的人没有一人比他更爱恶作剧——Ray本人。虽然这些插件看似轻松搞笑，但是你仍然可以从中学习到许多通过Xcode跟踪，如何找到你想要修改的元素，以及如何swizzle进你自己的函数。&lt;/p&gt;
&lt;p&gt;你将会查阅一些未公开的框架，会用到如下技术：&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-12-16-disassembling-the-assembly-part-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X86汇编知识&lt;/a&gt;，&lt;a href=&quot;http://www.raywenderlich.com/79600/navigating-a-new-codebase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码的导航技巧&lt;/a&gt;和在探索私有API和用&lt;a href=&quot;http://nshipster.com/method-swizzling/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;method swizzling&lt;/a&gt;做代码注入的&lt;a href=&quot;http://www.raywenderlich.com/?s=lldb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLDB技术&lt;/a&gt; 。由于会涉及到的方方面面较多，所以这篇教程会进行的较快。那么，在开始之前确保你的iOS或OS X平台在最佳状态吧！&lt;/p&gt;
&lt;p&gt;使用Swift进行插件开发会严重复杂化这个原本就已经很棘手的题目，况且Swift调试工具相较于Objectvie-C的仍然有所不足。所以现在，(在这篇教程中)开发插件最好的选择是Objective-C。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;&lt;p&gt;为了庆祝“恶搞搭档日”，你的Xcode插件将“瑞克摇摆”为你的牺牲者。稍等，什么是“瑞克摇摆”？它是免费版本的&lt;a href=&quot;https://en.wikipedia.org/wiki/Rickrolling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“瑞克摇摆”&lt;/a&gt;的版权和版税，就是将牺牲者替换到大家原本预期会出现的内容里。当你完成后，插件将Xcode变成下面的样子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将Ray的脸蛋植入到Xcode的通知中（例如：编译成功或失败）。&lt;br&gt;&lt;img src=&quot;http://cdn4.raywenderlich.com/wp-content/uploads/2015/04/Xcode_Swizzle_DispalAlert.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将Ray流行一时的歌曲植入到标题栏内，&lt;strong&gt;永不放弃你&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;http://cdn4.raywenderlich.com/wp-content/uploads/2015/05/Plugin_Swizzled_Titlebar.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将所有Xcode文档请求都重置到&lt;a href=&quot;https://www.youtube.com/watch?v=ce-_0opZzh0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“瑞克摇摆”的录像&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2015/04/Plugin_Swizzle_Documentation-700x288.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在教程的第一部分，你们将集中精力一路跟踪到负责显示“编译完成”通知的类，并将其修改为Ray的一张大头照。&lt;/p&gt;
&lt;h2 id=&quot;安装Alcatraz插件&quot;&gt;安装Alcatraz插件&lt;/h2&gt;&lt;p&gt;在做任何事之前，都应该先安装&lt;a href=&quot;http://alcatraz.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alcatraz&lt;/a&gt;。Alcatraz是Xcode插件的管家，它的作者是天才的开发者&lt;a href=&quot;https://twitter.com/kattrali&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kattrali&lt;/a&gt;，&lt;a href=&quot;https://twitter.com/_supermarin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@_supermarin&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/JurreTweet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@jurreTweet&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;安装Alcatraz，在终端上执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL http&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;//raw.github.&lt;span class=&quot;keyword&quot;&gt;com&lt;/span&gt;/supermarin/Alcatraz/master/Scripts/install.&lt;span class=&quot;keyword&quot;&gt;sh&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;脚本执行完成后，重启Xcode。会看到Alcatraz bundle的如下提示框；点击&lt;strong&gt;Load Bundle&lt;/strong&gt;。你一定想要更强力的Xcode，对不对？&lt;br&gt;&lt;img src=&quot;http://cdn5.raywenderlich.com/wp-content/uploads/2015/05/Xcode6.3.2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注意：如果你不小心点击了“Skip Bundle”，可以通过在终端里执行如下命令再次开启这个提示框：
defaults delete com&lt;span class=&quot;class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.dt&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.Xcode&lt;/span&gt; DVTPlugInManagerNonApplePlugIns-Xcode-&lt;span class=&quot;number&quot;&gt;6.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在Xcode的&lt;strong&gt;Window&lt;/strong&gt;菜单会出现一个名为&lt;strong&gt;Package Manager&lt;/strong&gt;的新选项。制作Xcode插件要通过在&lt;strong&gt;Build Settings&lt;/strong&gt;做诸多设置，并将Xcode依附到另一个Xcode实体上。幸运的是，&lt;a href=&quot;witter.com/kattral&quot;&gt;@kattrali&lt;/a&gt;已经为你做了这些工作，并可通过模板创建插件。&lt;/p&gt;
&lt;p&gt;找到&lt;strong&gt;Window\Package Manager&lt;/strong&gt;菜单，打开&lt;strong&gt;Alcatraz&lt;/strong&gt;插件。在Alcatraz搜索框中，搜索&lt;strong&gt;Xcode Plugin&lt;/strong&gt;。确保搜索窗口的&lt;strong&gt;All&lt;/strong&gt;和&lt;strong&gt;Templates&lt;/strong&gt;属性被选中。一旦找到Xcode的插件模板，点击它左边的安装按钮：&lt;br&gt;&lt;img src=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2015/05/XcodeAlcatrazPlugin-700x208.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一旦Alcatraz下载插件完成，就可以通过菜单&lt;strong&gt;File\New\Project…&lt;/strong&gt;创建新功能，选择新建&lt;strong&gt;OS X\Xcode Plugin\Xcode Plugin&lt;/strong&gt;模板选项，并点击&lt;strong&gt;Next&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;http://cdn3.raywenderlich.com/wp-content/uploads/2015/05/XcodePluginSelection-480x282.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;产品的名字设为“Rayrolling”，设置组织识别码为&lt;strong&gt;com.raywenderlich&lt;/strong&gt;（这很重要），并选择&lt;strong&gt;Objective-C&lt;/strong&gt;作为开发语言，保存工程到任何你想要的目录中。&lt;br&gt;&lt;img src=&quot;http://cdn1.raywenderlich.com/wp-content/uploads/2015/05/Plugin_Xcode_Setup-480x281.png&quot; alt=&quot;&quot;&gt;    &lt;/p&gt;
&lt;h2 id=&quot;Hello_World插件模板&quot;&gt;Hello World插件模板&lt;/h2&gt;&lt;p&gt;编译并运行新的Rayrool工程，你会看到一个新的Xcode&lt;strong&gt;子&lt;/strong&gt;实体。这个子实体在&lt;strong&gt;Edit&lt;/strong&gt;菜单里会出现名为&lt;strong&gt;Do Action&lt;/strong&gt;的新选项：&lt;br&gt;&lt;img src=&quot;http://cdn1.raywenderlich.com/wp-content/uploads/2015/02/XcodePluginHelloWorld.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择该菜单项会启动一个模式对话框：&lt;br&gt;&lt;img src=&quot;http://cdn3.raywenderlich.com/wp-content/uploads/2015/05/Screen-Shot-2015-05-11-at-8.48.27-PM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;插件被标定在特定版本的Xcode中运行，意味着当新版本的Xcode出现，所有的社区制作的第三方插件都会失效，直到添加该版本特定的UUID。如果个别模板无法正常工作，并且也看不到新菜单项，可能添加对该版本Xcode的支持。&lt;br&gt;在&lt;strong&gt;终端&lt;/strong&gt;中运行如下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defaults &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/Applications/&lt;/span&gt;Xcode.app&lt;span class=&quot;regexp&quot;&gt;/Contents/I&lt;/span&gt;nfo DVTPlugInCompatibilityUUID
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令会输出你目前所使用的Xcode的UUID。打开插件的&lt;strong&gt;Info.plist&lt;/strong&gt;，并找到键名&lt;strong&gt;DVTPlugInCompatibilityUUID&lt;/strong&gt;，将值添加到该数组中：&lt;br&gt;&lt;img src=&quot;http://cdn1.raywenderlich.com/wp-content/uploads/2015/05/DVTCompatibilityUUIDs.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;注意：&lt;/strong&gt;整片教程中，你将运行和修改已安装的插件。这将会改变Xcode的行为，并且有可能会是Xcode崩溃！如果你想禁用一个插件，你需要手动使用如下命令移除它：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &lt;span class=&quot;regexp&quot;&gt;~/Library/&lt;/span&gt;Application\ Support&lt;span class=&quot;regexp&quot;&gt;/Developer/&lt;/span&gt;Shared&lt;span class=&quot;regexp&quot;&gt;/Xcode/&lt;/span&gt;Plug-ins/
rm -r Rayrolling.xcplugin/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后重启Xcode。&lt;/p&gt;
&lt;h2 id=&quot;查找可修改的特性&quot;&gt;查找可修改的特性&lt;/h2&gt;&lt;p&gt;想获取后台将会发生什么，一个基本的尝试和正确的方式是通过&lt;em&gt;NSNotification observer&lt;/em&gt;，它监听着所有Xcode发生的事件。通过使用Xcode和监视这些被触发的通知，你将能够一窥底层的一些东西。&lt;/p&gt;
&lt;p&gt;打开&lt;strong&gt;Rayrolling.m&lt;/strong&gt;，并将下面的属性添加到这个类中&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; *notificationSet;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个&lt;strong&gt;NSMutableSet&lt;/strong&gt;保存了所有Xcode控制台输出的&lt;strong&gt;NSNotification&lt;/strong&gt;名称。下一步，在&lt;strong&gt;if (self = [super init]) {&lt;/strong&gt;这一行之后，增加&lt;strong&gt;initWithBundle:&lt;/strong&gt;的相关代码：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[NSNotificationCenter defaultCenter] &lt;span class=&quot;string&quot;&gt;addObserver:&lt;/span&gt;self &lt;span class=&quot;string&quot;&gt;selector:&lt;/span&gt;&lt;span class=&quot;annotation&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;handleNotification:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt;nil &lt;span class=&quot;string&quot;&gt;object:&lt;/span&gt;nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.notificationSet = [NSMutableSet &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数&lt;strong&gt;name&lt;/strong&gt;传nil，表明你想要监听Xcode分发的所有通知。&lt;br&gt;现在来实现&lt;strong&gt;handleNotification:&lt;/strong&gt;，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)handleNotification:(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *)notification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.notificationSet&lt;/span&gt; containsObject:notification&lt;span class=&quot;variable&quot;&gt;.name&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@, %@&quot;&lt;/span&gt;, notification&lt;span class=&quot;variable&quot;&gt;.name&lt;/span&gt;, [notification&lt;span class=&quot;variable&quot;&gt;.object&lt;/span&gt; class]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.notificationSet&lt;/span&gt; addObject:notification&lt;span class=&quot;variable&quot;&gt;.name&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;handleNotification:&lt;/strong&gt;检查这个通知的名字是否在&lt;strong&gt;notificationSet&lt;/strong&gt;中；如果不在，打印出通知的&lt;strong&gt;名字&lt;/strong&gt;和&lt;strong&gt;类&lt;/strong&gt;，并将之添加到该集合之中。这样，每种被报告的通知你只会看到一次。&lt;br&gt;接下来，查找并替换声明的新增行为菜单项，并更新其标题文字：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMenuItem *actionMenuItem = [[NSMenuItem alloc] &lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;Reset Logger&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt; action:&lt;/span&gt;&lt;span class=&quot;annotation&quot;&gt;@selector&lt;/span&gt;(doMenuAction) &lt;span class=&quot;string&quot;&gt;keyEquivalent:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对&lt;strong&gt;NSMenuItem&lt;/strong&gt;标题的这次微小的修改，仅是让你了解点击菜单的动作会重置&lt;strong&gt;NSNotificationset&lt;/strong&gt;。&lt;br&gt;最后，替换&lt;strong&gt;doMenuAction&lt;/strong&gt;的实现，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;tag&quot;&gt;doMenuAction&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr_selector&quot;&gt;[self.notificationSet removeAllObjects]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个菜单项现在将重置&lt;strong&gt;notificationSet&lt;/strong&gt;属性中的所有通知。这将让你在滤掉“控制台噪音”后，检查你想看的通知项。&lt;/p&gt;
&lt;p&gt;再一次编译并运行插件，以重新启动子Xcode。确保你清晰的区分开运行中的&lt;strong&gt;父Xcode&lt;/strong&gt;和正在调试状态的&lt;strong&gt;子Xcode&lt;/strong&gt;实例，因为父不会包含最新的插件更改，直到你重新启动Xcode将之载入内存。&lt;br&gt;随便操作一下子Xcode：点击按钮，打开窗口，并浏览一下应用，在父Xcode控制台会监视到所有的这些通知。&lt;/p&gt;
&lt;h2 id=&quot;查找并观察编译状态提示&quot;&gt;查找并观察编译状态提示&lt;/h2&gt;&lt;p&gt;既然你已经可以观察Xcode中被触发的&lt;strong&gt;NSNotification&lt;/strong&gt;名称，你只需将注意与显示编译提示相关联的类上。&lt;/p&gt;
&lt;p&gt;启动Xcode插件。在子Xcode中，打开任何工程。确保已经激活通知——在Xcode设置里，激活他们，无论是编译成功和失败。再一次，确保你在更改的是子Xcode的设置。&lt;br&gt;&lt;img src=&quot;http://cdn1.raywenderlich.com/wp-content/uploads/2015/05/rayroll-bezel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用被创建的&lt;strong&gt;Reset Logger&lt;/strong&gt;菜单项重置&lt;strong&gt;notificationSet&lt;/strong&gt;，并运行子Xcode工程。&lt;/p&gt;
&lt;p&gt;在子Xcode编译成功（或者失败）是，注意控制台里的信息。略读控制台信息，看看是否相关的内容。你是否能进一步瞧出值得查看的通知项？以下的方案可能会给你一点帮助。&lt;/p&gt;
&lt;p&gt;内附方案:通过通知捕捉&lt;br&gt;有几项值得我们进一步观察：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSWindowWillOrderOffScreenNotification,DVTBezelAlertPanel&lt;/li&gt;
&lt;li&gt;NSWindowDidOrderOffScreenNotification,DVTBezelAlertPanel&lt;/li&gt;
&lt;li&gt;NSWindowDidOrderOffScreenAndFinishAnimatingNotification,DVTBezelAlertPanel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn5.raywenderlich.com/wp-content/uploads/2015/02/XcodeNotificationListeningSourceKitCrash.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以从中选出一条，并且进一步探索它，看看能挖出什么信息。&lt;br&gt;那么&lt;strong&gt;NSWindowWillOrderOffScreenNotification&lt;/strong&gt;怎么样？好主意！探索一下它。&lt;br&gt;仍旧是&lt;strong&gt;Rayrolled.m&lt;/strong&gt;，找到&lt;strong&gt;handleNotification:&lt;/strong&gt;，并且在第一行增加断点，如图所示，之后的几步如下：&lt;br&gt;&lt;img src=&quot;http://cdn3.raywenderlich.com/wp-content/uploads/2015/04/Xcode_Add_Symbolic_Breakpoint.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在断点处，右击断点，选择&lt;strong&gt;Edit Breakpoint&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;在条件区域，粘贴&lt;strong&gt;[notification.name isEqualToString:@”NSWindowWillOrderOffScreenNotification”]&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;Action&lt;/strong&gt;区域，增加&lt;strong&gt;po notification.object&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;如果父Xcode没有在运行子Xcode，那么启动编译器，然后在子Xcode中开始编译。断点就会在&lt;strong&gt;NSWindowWillOrderOffScreenNotification&lt;/strong&gt;通知处起作用。观察&lt;strong&gt;-[notification object]&lt;/strong&gt;的打印输出。这是&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;，是你将要探索的诸多私有类中的第一个。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在开了一好头，你知道一个名为&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;的类，并且更重要的是，你有这个类在内存中的实体。而不幸的是，你没有它的头文件，来确定这个实体是否负责显示Xcode的提示。&lt;/p&gt;
&lt;p&gt;事实上，获得这个信息是可能的。尽管你没有这个类的头文件，但你的确连接到子Xcode的调试器，并且头文件能告诉你的，内存同样也可以告诉你。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;注意：&lt;/strong&gt;对于这套教程，LLDB控制台的输出经常会包括控制台输入。以&lt;strong&gt;(lldb)&lt;/strong&gt;开头的行可认为是控制台输入，并且也可以输入。三点…符号输出已从控制台的标准输出里忽略掉了。如果控制台中的巨量信息让你招架不住，按&lt;strong&gt;⌘ + K&lt;/strong&gt;可以移除当前的内容，可回归到开始的清爽界面。&lt;/p&gt;
&lt;p&gt;当父Xcode调试器在断点处停止时，在它的LLDB控制台输入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(lldb) image lookup -rn DVTBezelAlertPanel
&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; matches found &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/Application/&lt;/span&gt;Xcode.app&lt;span class=&quot;regexp&quot;&gt;/Contents/&lt;/span&gt;SharedFrameworks&lt;span class=&quot;regexp&quot;&gt;/DVTKit.framework/&lt;/span&gt;Versions&lt;span class=&quot;regexp&quot;&gt;/A/&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;DVTKit:&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在Xcode内对&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;的搜索，同样会在Xcode进程载入的框架、库和插件里搜索，并且会输出匹配的内容。看一下函数列表。在&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;图片转储过程中是否有函数将这个类和错误信息联系起来？下面的帮助可供参考。&lt;/p&gt;
&lt;p&gt;  解决方案：相关函数&lt;br&gt;  &lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;相关函数看起来可以做进一步研究：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;initWithIcon:message:parentWindow:duration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;initWithIcon:message:controlView:duration:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;controlView&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也许跳出上面两个初始化函数中的一个可以验证你是否跟踪到正确的提示框信息相关的类。&lt;br&gt;&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;注意：要知道&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;image lookup&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;的LLDB命令将列出内存中被执行的方法。当将此操作应用到一个特别的类上时，会忽略掉该类从其父类继承的方法。也就是说，该命令的搜索将忽略掉任何只在父类声明的方法，这些方法也不包括子类重载其父类的方法。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; LLDB控制台无输出时，以如下命令查看&lt;strong&gt;contentView&lt;/strong&gt;属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(lldb) po [notification.&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; controlView]
 &amp;lt;&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;控制台返回&lt;strong&gt;nil&lt;/strong&gt;。讨厌。也许是因为&lt;strong&gt;controlView&lt;/strong&gt;此时没有被赋值。是时候采取不同的策略了。&lt;br&gt;&lt;strong&gt;initWithIcon:message:parentWindow:duration&lt;/strong&gt;和&lt;strong&gt;initWithIcon:message:controlView:duration:&lt;/strong&gt;看着貌似有点意思了。因为你知道&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;实体目前还在，所以一定是这两个傻呆呆的方法中的一个执行过。你需要通过LLDB控制台在这两个函数处设个断点，然后再次出发这个类的初始化。&lt;/p&gt;
&lt;p&gt;在程序暂停时，在LLDB控制台中输入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(&lt;span class=&quot;atom&quot;&gt;lldb&lt;/span&gt;) &lt;span class=&quot;atom&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;DVTBezelAlertPanel\ initWithIcon:message:&#39;&lt;/span&gt;
&lt;span class=&quot;name&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;locations&lt;/span&gt;.
(&lt;span class=&quot;atom&quot;&gt;lldb&lt;/span&gt;) &lt;span class=&quot;atom&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;l&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是一个正则表达式，它可以在上面的两句&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;初始化处均设置上断点。因为两个初始化方法文字有相同的部分，这个表达式对他们都能匹配。确保在空格前有个“\”，并且命令被单引号包括，这样LLDB才知道如何正确的解析此表达式。&lt;/p&gt;
&lt;p&gt;恢复子程序的运行，然后重新编译子工程。编译器的断点将在&lt;strong&gt;initWithIcon:message:parentWindow:duration&lt;/strong&gt;处停止。&lt;br&gt;如果没有停住，确保父Xcode增加了断点，且子Xcode执行了工程。由于断点处的方法没有对应的源码文件，所以Xcode会在该函数的汇编码中暂停。&lt;/p&gt;
&lt;p&gt;由于你找到的函数没有源码文件，那么你需要开动脑筋想办法打印出传入该方法的参数。所以，我们是时候讨论一下&lt;strong&gt;汇编&lt;/strong&gt;了！&lt;br&gt;&lt;img src=&quot;http://cdn5.raywenderlich.com/wp-content/uploads/2015/03/AssemblyRage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;了解汇编的快速捷径&quot;&gt;了解汇编的快速捷径&lt;/h2&gt;&lt;p&gt;在运行私有API时，你需要观察&lt;strong&gt;寄存器&lt;/strong&gt;，而不是像在调试源代码时所用的调试标识符。知道寄存器在&lt;strong&gt;x86-64&lt;/strong&gt;架构上的使用机制是有着巨大帮助的。&lt;/p&gt;
&lt;p&gt;尽管这不是必读内容，&lt;a href=&quot;https://mikeash.com/pyblog/friday-qa-2011-12-16-disassembling-the-assembly-part-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;是一篇补充x86 Mach-0平台汇编的优秀资源。在我们这套教程的第3部分，将会通过反汇编剖析一个方法，来看看正在执行什么，但不是现在，你将走一条更好走的路。&lt;/p&gt;
&lt;p&gt;需要标明一下各个寄存器是什么和是做什么的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$rdi:&lt;/strong&gt;该寄存器引用了传入函数的&lt;strong&gt;self&lt;/strong&gt;参数，是第一个被传入的参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$rsi:&lt;/strong&gt;引用的&lt;strong&gt;Selector&lt;/strong&gt;参数，这是第二个参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$rdx:&lt;/strong&gt;传入函数的第三个参数，和Objective-C函数的第一个参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$rcx:&lt;/strong&gt;传入函数的第四个参数，和Objective-C函数的第二个参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$r8:&lt;/strong&gt;传入函数的第五个参数。如果函数还有参数，&lt;strong&gt;$r9&lt;/strong&gt;是参数栈结构里的第六个参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$rax:&lt;/strong&gt;返回值被存入该寄存器。例如，当跳出&lt;strong&gt;-[aClass description]&lt;/strong&gt;，在&lt;strong&gt;$rax&lt;/strong&gt;里会有一个&lt;strong&gt;NSString&lt;/strong&gt;类型的关于&lt;strong&gt;aClass&lt;/strong&gt;实体的描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;注意：&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;上面的讲述在一些情况下是不对的。有时二进制会针对不同的函数参数类型使用不同的寄存器，比如&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;doubles&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;则使用&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;$xmm&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;寄存器。所以，以上仅可作为参考。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将这些理论实践一下，看看下面这个函数。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aClass&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)aMethodWithMessage:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)message；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)aMethodWithMessage:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)message &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Hey the message is: %@&quot;&lt;/span&gt;,message]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样调用：&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;atom&quot;&gt;aClass&lt;/span&gt; *&lt;span class=&quot;atom&quot;&gt;aClassInstance&lt;/span&gt; = [[&lt;span class=&quot;atom&quot;&gt;aClass&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;alloc&lt;/span&gt;] &lt;span class=&quot;atom&quot;&gt;init&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;atom&quot;&gt;aClassInstance&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;aMethodWithMessage&lt;/span&gt;:@&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译时，&lt;strong&gt;aMethodWithMessage:&lt;/strong&gt;会被传入&lt;strong&gt;objc_msgSend&lt;/strong&gt;，看起来大概像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;objc_msgSend&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;aClassInstance&lt;/span&gt;, @selector&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;aMethodWithMessage&lt;/span&gt;:)&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;aClass&lt;/strong&gt;实体的&lt;strong&gt;aMethodWithMessage:&lt;/strong&gt;函数会将如下结果写入这一系列的寄存器&lt;br&gt;&lt;strong&gt;一旦调用aMethodWithMessage:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$rdi:&lt;/strong&gt;存储一个&lt;strong&gt;aClass&lt;/strong&gt;实体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$rsi:&lt;/strong&gt;存储了选择器&lt;strong&gt;aMethodWithMessage&lt;/strong&gt;，它其实是个char *（在lldb中试一下&lt;strong&gt;po (SEL)$rsi&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$rdx:&lt;/strong&gt;存储了&lt;strong&gt;message&lt;/strong&gt;内容，它引用了&lt;strong&gt;@”Hello World”的实体。
&lt;/strong&gt;离开函数时**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$rax:&lt;/strong&gt;存储返回值，它是一个&lt;strong&gt;NSString&lt;/strong&gt;实体。在这个例子中，它是@”Hey the message is:Hello World”的实体。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;深入x86寄存器暂储机制&quot;&gt;深入x86寄存器暂储机制&lt;/h2&gt;&lt;p&gt;既然你已是一名专业的汇编寄存器向导，那么现在重新访问&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;的&lt;strong&gt;initWithIcon:message:parentWindow:duration:&lt;/strong&gt;。希望你还没从这个函数的断点上移开。如果你这么做了，那么重新运行子Xcode。再次提醒，你正在寻找一个类的线索，它负责为显示Xcode编译成功提示。&lt;/p&gt;
&lt;p&gt;在断点&lt;strong&gt;initWithIcon:message:parentWindow:duration&lt;/strong&gt;处停止后，在LLDB输入如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;lldb&lt;/span&gt;)&lt;/span&gt; re re
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令是&lt;strong&gt;读寄存器(register read)&lt;/strong&gt;的缩写，将打印出机器中一些可用的很重要的寄存器。&lt;/p&gt;
&lt;p&gt;用你已经学到的读0x86_64寄存器知识，检查参数&lt;strong&gt;message:&lt;/strong&gt;所属的寄存器，和第四个objc_msgSend参数。内容是否与提示字符串相符？&lt;/p&gt;
&lt;p&gt;  方法如下：&lt;br&gt;  是的，查看&lt;strong&gt;$rcx&lt;/strong&gt;寄存器，可以看到与编译提示对应的&lt;strong&gt;message&lt;/strong&gt;参数。&lt;br&gt;  在&lt;strong&gt;LLDB控制台&lt;/strong&gt;输入如下，进一步探索：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(lldb) po &lt;span class=&quot;variable&quot;&gt;$rcx&lt;/span&gt;
Build Failed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;strong&gt;注意：&lt;/strong&gt;Xcode会打印出&lt;strong&gt;AT&amp;amp;T&lt;/strong&gt;风格的汇编。充分了解当前的风格，因为源操作对象和目的操作对象会被交换。&lt;br&gt;  看，这就是“元凶”。&lt;/p&gt;
&lt;p&gt;给参数&lt;strong&gt;$rcx&lt;/strong&gt;寄存器写入一个新字符串，看看提示框是否改变就可以100%确定了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(lldb) po [&lt;span class=&quot;variable&quot;&gt;$rcx&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]&lt;/span&gt;
__NSCFConstantString               
(lldb) po id &lt;span class=&quot;variable&quot;&gt;$a&lt;/span&gt; = @&lt;span class=&quot;string&quot;&gt;&quot;Womp womp!&quot;&lt;/span&gt;;
(lldb) p/x &lt;span class=&quot;variable&quot;&gt;$a&lt;/span&gt;
(id) &lt;span class=&quot;variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0x000061800203faa0&lt;/span&gt;
(lldb) re w &lt;span class=&quot;variable&quot;&gt;$rcx&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x000061800203faa0&lt;/span&gt;
(lldb) c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://cdn4.raywenderlich.com/wp-content/uploads/2015/04/Womp_Womp_Xcode.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序恢复运行，注意调试器的提示信息已经改变。现在你可以安全的推断出这个类与编译提示相关联了。已经初露端倪，对不对？&lt;/p&gt;
&lt;h2 id=&quot;代码注入&quot;&gt;代码注入&lt;/h2&gt;&lt;p&gt;你已经找到了相关的类。现在可以在编译提示显示时，通过代码注入将参数&lt;strong&gt;DVTBezelAlertPanel&lt;/strong&gt;的提示图片替换为一张Rayrolling的萌照。&lt;/p&gt;
&lt;p&gt;那么&lt;a href=&quot;http://nshipster.com/method-swizzling/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;method swizzling&lt;/a&gt;该上场了！&lt;/p&gt;
&lt;p&gt;因为你可能要swizzle不同类的数个函数，所以最好用&lt;strong&gt;NSObject&lt;/strong&gt;的&lt;strong&gt;Category&lt;/strong&gt;创建一个方法以方便进行逻辑构建。&lt;/p&gt;
&lt;p&gt;选择&lt;strong&gt;File\New\File…&lt;/strong&gt;，并选择&lt;strong&gt;OS X\Source\Objective-C File&lt;/strong&gt;模板。命名为&lt;strong&gt;MethodSwizzler&lt;/strong&gt;并设置文件类型为&lt;strong&gt;Category&lt;/strong&gt;和类NSObject。&lt;br&gt;打开&lt;strong&gt;NSObject+MethodSwizzler.m&lt;/strong&gt;，并将其内容替换为如下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&quot;NSObject+MethodSwizzler.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;MethodSwizzler&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)swizzleWithOriginalSelector:(SEL)originalSelector swizzledSelector:(SEL) swizzledSelector isClassMethod:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isClassMethod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Class cls = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Method originalMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Method swizzledMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isClassMethod) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    originalMethod = class_getClassMethod(cls, originalSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    swizzledMethod = class_getClassMethod(cls, swizzledSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    originalMethod = class_getInstanceMethod(cls, originalSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    swizzledMethod = class_getInstanceMethod(cls, swizzledSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!originalMethod) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Error: originalMethod is nil, did you spell it incorrectly? %@&quot;&lt;/span&gt;, originalMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  method_exchangeImplementations(originalMethod, swizzledMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;带编号的注释含义依次为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个神奇的头文件是负责声明用于method swizzling的函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isClassMethod&lt;/strong&gt;用以判断这些方法是类方法，还是实例方法。&lt;/li&gt;
&lt;li&gt;当你不需要编译器帮忙自动编译方法时，很容易拼错方法名。这一步是检查以确保所声明的SEL准确无误。&lt;/li&gt;
&lt;li&gt;这个函数会切换到你的实现部分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在&lt;strong&gt;NSObject+MethodSwizzler.h&lt;/strong&gt;中声明&lt;strong&gt;swizzleWithOriginalSelector:swizzledSelector:isClassMethod&lt;/strong&gt;方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; NSObject (MethodSwizzler)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;typename&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;swizzleWithOriginalSelector:&lt;/span&gt;(SEL)originalSelector &lt;span class=&quot;string&quot;&gt;swizzledSelector:&lt;/span&gt;(SEL) swizzledSelector &lt;span class=&quot;string&quot;&gt;isClassMethod:&lt;/span&gt;(BOOL)isClassMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在就可以真的swizzle了！创建另一个&lt;strong&gt;Category&lt;/strong&gt;并命名为&lt;strong&gt;Rayrolling_DVTBezelAlertPanel&lt;/strong&gt;，它继承自&lt;strong&gt;NSObject&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以如下代码替换&lt;strong&gt;NSObject+Rayrolling_DVTBezelAlertPanel.m&lt;/strong&gt;里的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;NSObject+Rayrolling_DVTBezelAlertPanel.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;NSObject+MethodSwizzler.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;lt;Cocoa/Cocoa.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; NSObject ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)&lt;span class=&quot;string&quot;&gt;initWithIcon:&lt;/span&gt;(id)arg1 &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;(id)arg2 &lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;(id)arg3 &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;(&lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt;)arg4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@implementation&lt;/span&gt; NSObject (Rayrolling_DVTBezelAlertPanel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;typename&quot;&gt;void&lt;/span&gt;)load&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; dispatch_once_t onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dispatch_once(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSClassFromString(@&lt;span class=&quot;string&quot;&gt;&quot;DVTBezelAlertPanel&quot;&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;swizzleWithOriginalSelector:&lt;/span&gt;&lt;span class=&quot;annotation&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;initWithIcon:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;swizzledSelector:&lt;/span&gt;&lt;span class=&quot;annotation&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;Rayrolling_initWithIcon:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;isClassMethod:&lt;/span&gt;NO];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)&lt;span class=&quot;string&quot;&gt;Rayrolling_initWithIcon:&lt;/span&gt;(id)icon &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;(id)message &lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;(id)window &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;(&lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt;)duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Swizzle success! %@&quot;&lt;/span&gt;, self);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [self &lt;span class=&quot;string&quot;&gt;Rayrolling_initWithIcon:&lt;/span&gt;icon &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;message &lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;window &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;duration];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码相对的简单明了，解释如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保导入要swizzling的方法。&lt;/li&gt;
&lt;li&gt;你可以在此声明所有要用到的函数。尽管这不是必要的，但这可以让编译器更好的自动编译你的代码。另外，这个技巧可抑制未声明函数的警告。&lt;/li&gt;
&lt;li&gt;这就是你将要swizzling的私有方法。&lt;/li&gt;
&lt;li&gt;因为你不想重新声明一个私有类，你可以用分类(category)代替。&lt;/li&gt;
&lt;li&gt;这是代码注入“伎俩”的核心。你将在&lt;strong&gt;load&lt;/strong&gt;执行注入。&lt;strong&gt;load&lt;/strong&gt;函数是唯一的，它里面有&lt;del&gt;一对多的关系&lt;/del&gt;。也就是说，同一个类的多个分组都可在一个&lt;strong&gt;load&lt;/strong&gt;命令里实现，并执行他们。&lt;/li&gt;
&lt;li&gt;由于&lt;strong&gt;load&lt;/strong&gt;会被调用多次，所以需要使用&lt;strong&gt;dispatch_once&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;此处使用的是你之前实现过的&lt;strong&gt;NSObject&lt;/strong&gt;分类方法。注意，你使用的是&lt;strong&gt;NSClassFromString&lt;/strong&gt;来动态检索运行时的私有类。&lt;/li&gt;
&lt;li&gt;此处是替代原来的函数。使用一个只有你自己可以规定的唯一命名空间约定，这是一个很好的做法。&lt;/li&gt;
&lt;li&gt;此处是测试swizzling能否成功，将字符打印到控制台。&lt;/li&gt;
&lt;li&gt;由于你正在swizzle原来的函数，所以当你调用被swizzle的函数时，仍然会调用原来的。这就意味着你可以在原来的方法被调用前后添加一些代码，甚至更改传入的参数…这个一会儿将要用到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;恭喜你！你已经成功的将代码注入到一个私有类的私有方法！编译父Xcode，然后编译子Xcode，看看添加控制台的信息是否被swizzle进去了。&lt;/p&gt;
&lt;p&gt;现在可以使用Rayrolling的照片替换掉所有编译提示图片了。从&lt;a href=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2015/04/IDEAlertBezel_Generic_Rayrolling.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载要swizzle的&lt;a href=&quot;http://www.raywenderlich.com/about#cbelanger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crispy&lt;/a&gt;的玉照，并将它写入Xcode工程。确保选择上&lt;strong&gt;Copy Items if Needed&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;回到&lt;strong&gt;Rayrolliing_initWithIcon:message:parentWindow:duration&lt;/strong&gt;并将其内容更改如下：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (id)&lt;span class=&quot;string&quot;&gt;Rayrolling_initWithIcon:&lt;/span&gt;(id)arg1 &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;(id)arg2 &lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;(id)arg3 &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;(&lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt;)arg4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arg1) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSBundle *bundle = [NSBundle &lt;span class=&quot;string&quot;&gt;bundleWithIdentifier:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;com.raywenderlich.Rayrolling&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSImage *newImage = [bundle &lt;span class=&quot;string&quot;&gt;imageForResource:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;IDEAlertBezel_Generic_Rayrolling.pdf&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [self &lt;span class=&quot;string&quot;&gt;Rayrolling_initWithIcon:&lt;/span&gt;newImage &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;arg2 &lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;arg3 &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;arg4];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [self &lt;span class=&quot;string&quot;&gt;Rayrolling_initWithIcon:&lt;/span&gt;arg1 &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;arg2 &lt;span class=&quot;string&quot;&gt;parentWindow:&lt;/span&gt;arg3 &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;arg4];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数检查图片是否被传入原来的函数，并将其替换为Rayrolling的图片。需要注意的是你必须要用&lt;strong&gt;+[NSBundle bundleWithIdentifier:]载入图片，因为它并没存储在你的&lt;/strong&gt;mainBundle**。&lt;br&gt;编译并运行工程，退出所有的Xcode实体，重启。&lt;br&gt;完美！:]&lt;/p&gt;
&lt;h2 id=&quot;切换和持久化“雷摇摆”（Rayroll）&quot;&gt;切换和持久化“雷摇摆”（Rayroll）&lt;/h2&gt;&lt;p&gt;你正设计的这个插件也许会惹人烦，很可能你更想让其可以在打开或者关闭状态之间切换，而可以使用&lt;strong&gt;NSUserDefaults&lt;/strong&gt;来持久化Xcode的各种实体状态。&lt;/p&gt;
&lt;p&gt;回到**Rayrolling.h””，并将如下属性添加到这个头文件：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;BOOL&lt;/span&gt;)&lt;/span&gt;isEnabled&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到&lt;strong&gt;Rayrolling.m&lt;/strong&gt;，并添加如下函数：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (BOOL)isEnabled &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[NSUserDefaults standardUserDefaults] &lt;span class=&quot;string&quot;&gt;boolForKey:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;com.raywenderlich.Rayrolling.shouldbeEnable&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;typename&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;setIsEnabled:&lt;/span&gt;(BOOL)shouldBeEnabled &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [[NSUserDefaults standardUserDefaults] &lt;span class=&quot;string&quot;&gt;setBool:&lt;/span&gt;shouldBeEnabled &lt;span class=&quot;string&quot;&gt;forKey:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;com.raywenderlich.Rayrolling.shouldbeEnable&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你已经有了持久化你的选择的相关逻辑，现在需要在界面上添加个切换开关。&lt;br&gt;回到&lt;strong&gt;Rayrolling.m&lt;/strong&gt;，编辑&lt;em&gt;-(void) doMenuAction*&lt;/em&gt;，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;typename&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;doMenuAction:&lt;/span&gt;(NSMenuItem *)menuItem &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [Rayrolling &lt;span class=&quot;string&quot;&gt;setIsEnabled:&lt;/span&gt;![Rayrolling isEnabled]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  menuItem.title = [Rayrolling isEnabled] ? @&quot;Disable Rayrolling&quot; : @&lt;span class=&quot;string&quot;&gt;&quot;Enable Rayrolling&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这简单实现了切换激活和禁止”Rayrolling”的功能。&lt;br&gt;最后，在&lt;strong&gt;didApplicationFinishLaunchingNotification:&lt;/strong&gt;里菜单设置代码，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;name&quot;&gt;NSMenuItem&lt;/span&gt; *&lt;span class=&quot;atom&quot;&gt;menuItem&lt;/span&gt; = [[&lt;span class=&quot;name&quot;&gt;NSApp&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;mainMenu&lt;/span&gt;] &lt;span class=&quot;atom&quot;&gt;itemWithTitle&lt;/span&gt;:@&lt;span class=&quot;string&quot;&gt;&quot;Edit&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;atom&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;atom&quot;&gt;menuItem&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [[&lt;span class=&quot;atom&quot;&gt;menuItem&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;submenu&lt;/span&gt;] &lt;span class=&quot;atom&quot;&gt;addItem&lt;/span&gt;:[&lt;span class=&quot;name&quot;&gt;NSMenuItem&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;separatorItem&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;name&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;atom&quot;&gt;title&lt;/span&gt; = [&lt;span class=&quot;name&quot;&gt;Rayrolling&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;isEnabled&lt;/span&gt;] ? @&lt;span class=&quot;string&quot;&gt;&quot;Disable Rayrolling&quot;&lt;/span&gt; : @&lt;span class=&quot;string&quot;&gt;&quot;Enable Rayrolling&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;name&quot;&gt;NSMenuItem&lt;/span&gt; *&lt;span class=&quot;atom&quot;&gt;actionMenuItem&lt;/span&gt; = [[&lt;span class=&quot;name&quot;&gt;NSMenuItem&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;alloc&lt;/span&gt;] &lt;span class=&quot;atom&quot;&gt;initWithTitle&lt;/span&gt;:&lt;span class=&quot;atom&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;action&lt;/span&gt;:@&lt;span class=&quot;atom&quot;&gt;selector&lt;/span&gt;(&lt;span class=&quot;atom&quot;&gt;doMenuAction&lt;/span&gt;:) &lt;span class=&quot;atom&quot;&gt;keyEquivalent&lt;/span&gt;:@&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;atom&quot;&gt;actionMenuItem&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;setTarget&lt;/span&gt;:&lt;span class=&quot;atom&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [[&lt;span class=&quot;atom&quot;&gt;menuItem&lt;/span&gt; &lt;span class=&quot;atom&quot;&gt;submenu&lt;/span&gt;] &lt;span class=&quot;atom&quot;&gt;addItem&lt;/span&gt;:&lt;span class=&quot;atom&quot;&gt;actionMenuItem&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你有个菜单项，它会持久化Xcode启动状态，并记住打开或关闭此逻辑的设定。&lt;br&gt;回到&lt;strong&gt;NSObject+Rayrolling_DVTBezelAlertPanel.m&lt;/strong&gt;，并添加如下引用：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Rayrolling.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，打开&lt;strong&gt;Rayrolling_initWithIcon:message:parentWindow:duration:&lt;/strong&gt;，并将&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(arg1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;替换为&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;([Rayrolling isEnabled] &amp;amp;&amp;amp; arg1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译并运行程序，这个变化对你的插件会有一定的宣传作用。&lt;br&gt;Boom!你现在已经拥有可以编辑Xcode提示，并可以打开和关掉的插件。今天完美收工，是不是？&lt;/p&gt;
&lt;h2 id=&quot;接下来，做什么？&quot;&gt;接下来，做什么？&lt;/h2&gt;&lt;p&gt;你可以从这里下载本教程的&lt;a href=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2015/05/Rayrolling_Part1_Final.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整Rayrolling工程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;虽然你已经有了不少的进展，但是仍然有很多东西要做？在第2部分，你将学习动态跟踪（Dtrace）和探索一些LLDB的高阶特性的基础，可以深入的观察到Xcode正运行的进程。&lt;/p&gt;
&lt;p&gt;如果你想预习一些知识，在第3部分前有一些作业，里面有不少汇编代码。现在可通过阅读Mike Ash的关于反汇编的&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-12-16-disassembling-the-assembly-part-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第1部分&lt;/a&gt;和&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-12-23-disassembling-the-assembly-part-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第2部分&lt;/a&gt;文章，来学习和补充一些X86_64的汇编知识。这两篇文章对理解接下来的内容很有帮助。&lt;/p&gt;
&lt;p&gt;好运吧，祝愉快！如果你关于本教程有任何的意见和问题，请在&lt;a href=&quot;http://www.raywenderlich.com/94020/creating-an-xcode-plugin-part-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下面&lt;/a&gt;留言。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;译者注：在学习写xcode插件的过程中，找了一些资料，其中&lt;a href=&quot;http://www.raywenderlich.com&quot;&gt;www.raywenderlich.com&lt;/a&gt;中的三篇文章写得很好，这是其中的第一篇《&lt;a href=&quot;http://http://www.raywenderlich.com/94020/creating-an-xcode-plugin-part-1&quot;&gt;How To Create an Xcode Plugin:Part1/3 &lt;/a&gt;》。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;更新备注：&lt;/strong&gt;这篇教程只用Xcode6.3.2测试过——如果你使用的其他版本的Xcode，那么你的经历可能会与这篇教程中的有一定出入。&lt;/p&gt;
&lt;p&gt;苹果公司针对扩展其产品的“一刀切”的规则就像让人强吞下一颗难以忍受的药丸。尽管目前苹果公司强制iOS或者OS X平台的开发者使用它的工作流程，但是仍然可以通过制作插件的方式使Xcode更为适用。&lt;/p&gt;
&lt;p&gt;这不是关于如何制作Xcode插件的苹果公司官方文档，但是开发社区已经做了数量惊人的工作致力于帮助让开发者拥有更为有效的工具。&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;https://github.com/ksuther/KSImageNamed-Xcode&quot;&gt;autocompletion for images&lt;/a&gt;，到nuking你的&lt;a href=&quot;https://github.com/kattrali/deriveddata-exterminator&quot;&gt;Derived Data&lt;/a&gt;，再到&lt;a href=&quot;https://github.com/XVimProject/XVim&quot;&gt;vim editor&lt;/a&gt;，Xcode插件社区已经推动了原本被认为可以推动的边界。&lt;/p&gt;
&lt;p&gt;在这史诗般的三篇教程中，你将制作一款Xcode插件来恶搞你的搭档，而主演恶搞者的人没有一人比他更爱恶作剧——Ray本人。虽然这些插件看似轻松搞笑，但是你仍然可以从中学习到许多通过Xcode跟踪，如何找到你想要修改的元素，以及如何swizzle进你自己的函数。&lt;/p&gt;
&lt;p&gt;你将会查阅一些未公开的框架，会用到如下技术：&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-12-16-disassembling-the-assembly-part-1.html&quot;&gt;X86汇编知识&lt;/a&gt;，&lt;a href=&quot;http://www.raywenderlich.com/79600/navigating-a-new-codebase&quot;&gt;源码的导航技巧&lt;/a&gt;和在探索私有API和用&lt;a href=&quot;http://nshipster.com/method-swizzling/&quot;&gt;method swizzling&lt;/a&gt;做代码注入的&lt;a href=&quot;http://www.raywenderlich.com/?s=lldb&quot;&gt;LLDB技术&lt;/a&gt; 。由于会涉及到的方方面面较多，所以这篇教程会进行的较快。那么，在开始之前确保你的iOS或OS X平台在最佳状态吧！&lt;/p&gt;
&lt;p&gt;使用Swift进行插件开发会严重复杂化这个原本就已经很棘手的题目，况且Swift调试工具相较于Objectvie-C的仍然有所不足。所以现在，(在这篇教程中)开发插件最好的选择是Objective-C。&lt;/p&gt;
    
    </summary>
    
      <category term="软件探索录" scheme="http://ieatapple.com/categories/%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2%E5%BD%95/"/>
    
    
      <category term="plugin" scheme="http://ieatapple.com/tags/plugin/"/>
    
      <category term="xcode" scheme="http://ieatapple.com/tags/xcode/"/>
    
  </entry>
  
</feed>
